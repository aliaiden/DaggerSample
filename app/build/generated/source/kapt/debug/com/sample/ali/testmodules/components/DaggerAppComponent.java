// Generated by Dagger (https://dagger.dev).
package com.sample.ali.testmodules.components;

import android.content.SharedPreferences;
import com.sample.ali.testmodules.MyApplication;
import com.sample.ali.testmodules.datamodels.UserDataModel;
import com.sample.ali.testmodules.modules.ActivitiesAndFragmentsBindingModule_ExampleFragment$app_debug;
import com.sample.ali.testmodules.modules.ActivitiesAndFragmentsBindingModule_MainActivity$app_debug;
import com.sample.ali.testmodules.modules.ActivitiesAndFragmentsBindingModule_SecondActivity$app_debug;
import com.sample.ali.testmodules.modules.AppModule_ProvideSharedPreferencesFactory;
import com.sample.ali.testmodules.modules.SecondActivityModule;
import com.sample.ali.testmodules.modules.SecondActivityModule_ProvideABCKeyFactory;
import com.sample.ali.testmodules.ui.MainActivity;
import com.sample.ali.testmodules.ui.MainActivity_MembersInjector;
import com.sample.ali.testmodules.ui.SecondActivity;
import com.sample.ali.testmodules.ui.SecondActivity_MembersInjector;
import com.sample.ali.testmodules.ui.fragment.ExampleFragment;
import com.sample.ali.testmodules.ui.fragment.ExampleFragment_MembersInjector;
import dagger.android.AndroidInjector;
import dagger.android.DaggerActivity_MembersInjector;
import dagger.android.DaggerApplication;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DaggerFragment_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private final MyApplication application;

  private Provider<ActivitiesAndFragmentsBindingModule_MainActivity$app_debug.MainActivitySubcomponent.Factory> mainActivitySubcomponentFactoryProvider;

  private Provider<ActivitiesAndFragmentsBindingModule_SecondActivity$app_debug.SecondActivitySubcomponent.Factory> secondActivitySubcomponentFactoryProvider;

  private Provider<ActivitiesAndFragmentsBindingModule_ExampleFragment$app_debug.ExampleFragmentSubcomponent.Factory> exampleFragmentSubcomponentFactoryProvider;

  private DaggerAppComponent(MyApplication applicationParam) {
    this.application = applicationParam;
    initialize(applicationParam);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(3).put(MainActivity.class, (Provider) mainActivitySubcomponentFactoryProvider).put(SecondActivity.class, (Provider) secondActivitySubcomponentFactoryProvider).put(ExampleFragment.class, (Provider) exampleFragmentSubcomponentFactoryProvider).build();}

  private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

  private SharedPreferences getSharedPreferences() {
    return AppModule_ProvideSharedPreferencesFactory.provideSharedPreferences(application);}

  @SuppressWarnings("unchecked")
  private void initialize(final MyApplication applicationParam) {
    this.mainActivitySubcomponentFactoryProvider = new Provider<ActivitiesAndFragmentsBindingModule_MainActivity$app_debug.MainActivitySubcomponent.Factory>() {
      @Override
      public ActivitiesAndFragmentsBindingModule_MainActivity$app_debug.MainActivitySubcomponent.Factory get(
          ) {
        return new MainActivitySubcomponentFactory();}
    };
    this.secondActivitySubcomponentFactoryProvider = new Provider<ActivitiesAndFragmentsBindingModule_SecondActivity$app_debug.SecondActivitySubcomponent.Factory>() {
      @Override
      public ActivitiesAndFragmentsBindingModule_SecondActivity$app_debug.SecondActivitySubcomponent.Factory get(
          ) {
        return new SecondActivitySubcomponentFactory();}
    };
    this.exampleFragmentSubcomponentFactoryProvider = new Provider<ActivitiesAndFragmentsBindingModule_ExampleFragment$app_debug.ExampleFragmentSubcomponent.Factory>() {
      @Override
      public ActivitiesAndFragmentsBindingModule_ExampleFragment$app_debug.ExampleFragmentSubcomponent.Factory get(
          ) {
        return new ExampleFragmentSubcomponentFactory();}
    };
  }

  @Override
  public void inject(MyApplication application) {
    injectMyApplication(application);}

  @Override
  public void inject(DaggerApplication instance) {
    injectDaggerApplication(instance);}

  private MyApplication injectMyApplication(MyApplication instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
    return instance;
  }

  private DaggerApplication injectDaggerApplication(DaggerApplication instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private MyApplication application;

    @Override
    public Builder application(MyApplication application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(application, MyApplication.class);
      return new DaggerAppComponent(application);
    }
  }

  private final class MainActivitySubcomponentFactory implements ActivitiesAndFragmentsBindingModule_MainActivity$app_debug.MainActivitySubcomponent.Factory {
    @Override
    public ActivitiesAndFragmentsBindingModule_MainActivity$app_debug.MainActivitySubcomponent create(
        MainActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainActivitySubcomponentImpl(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl implements ActivitiesAndFragmentsBindingModule_MainActivity$app_debug.MainActivitySubcomponent {
    private MainActivitySubcomponentImpl(MainActivity arg0) {

    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);}

    private MainActivity injectMainActivity(MainActivity instance) {
      DaggerActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      MainActivity_MembersInjector.injectSharedPreferences(instance, DaggerAppComponent.this.getSharedPreferences());
      return instance;
    }
  }

  private final class SecondActivitySubcomponentFactory implements ActivitiesAndFragmentsBindingModule_SecondActivity$app_debug.SecondActivitySubcomponent.Factory {
    @Override
    public ActivitiesAndFragmentsBindingModule_SecondActivity$app_debug.SecondActivitySubcomponent create(
        SecondActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new SecondActivitySubcomponentImpl(new SecondActivityModule(), arg0);
    }
  }

  private final class SecondActivitySubcomponentImpl implements ActivitiesAndFragmentsBindingModule_SecondActivity$app_debug.SecondActivitySubcomponent {
    private final SecondActivityModule secondActivityModule;

    private SecondActivitySubcomponentImpl(SecondActivityModule secondActivityModuleParam,
        SecondActivity arg0) {
      this.secondActivityModule = secondActivityModuleParam;
    }

    private UserDataModel getUserDataModel() {
      return SecondActivityModule_ProvideABCKeyFactory.provideABCKey(secondActivityModule, DaggerAppComponent.this.getSharedPreferences());}

    @Override
    public void inject(SecondActivity arg0) {
      injectSecondActivity(arg0);}

    private SecondActivity injectSecondActivity(SecondActivity instance) {
      DaggerActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      SecondActivity_MembersInjector.injectUser(instance, getUserDataModel());
      return instance;
    }
  }

  private final class ExampleFragmentSubcomponentFactory implements ActivitiesAndFragmentsBindingModule_ExampleFragment$app_debug.ExampleFragmentSubcomponent.Factory {
    @Override
    public ActivitiesAndFragmentsBindingModule_ExampleFragment$app_debug.ExampleFragmentSubcomponent create(
        ExampleFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new ExampleFragmentSubcomponentImpl(arg0);
    }
  }

  private final class ExampleFragmentSubcomponentImpl implements ActivitiesAndFragmentsBindingModule_ExampleFragment$app_debug.ExampleFragmentSubcomponent {
    private ExampleFragmentSubcomponentImpl(ExampleFragment arg0) {

    }

    @Override
    public void inject(ExampleFragment arg0) {
      injectExampleFragment(arg0);}

    private ExampleFragment injectExampleFragment(ExampleFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      ExampleFragment_MembersInjector.injectSharedPreferences(instance, DaggerAppComponent.this.getSharedPreferences());
      return instance;
    }
  }
}
